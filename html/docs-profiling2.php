<?php $title = "Xdebug: Documentation - Profiler - Xdebug 2"; include "include/header.php"; hits ('xdebug-docs-profiler2'); ?>
		<tr>
			<td>&nbsp;</td>
			<td><span class="serif">
			
<!-- MAIN FEATURE START -->

<span class="sans">XDEBUG EXTENSION FOR PHP | DOCUMENTATION - PROFILER - XDEBUG 2</span><br />

<?php include "include/menu-docs.php"; ?>

<a name="introduction"></a>
<span class="sans">INTRODUCTION</span><br />

<p>Xdebug's Profiler is a powerful tool that gives you the ability to analyze
your PHP code and determine bottlenecks or generally see which parts of your
code are slow and could use a speed boost. The profiler in Xdebug 2 outputs
profiling information in the form of a cachegrind compatible file.  This allows
you to use the excellent <a href='http://kcachegrind.sf.net'>KCacheGrind</a>
tool (Linux, KDE) to analyse your profiling data.</p>

<p>In case you can not use KDE (or do not want to use KDE) the kcachegrind
package also comes with a perl script "ct_annotate" which produces ASCII output
from the profiler trace files.</p>

<a name="starting"></a>
<span class="sans">STARTING THE PROFILER</span><br />

<p>Profiling is enabled by setting the
<a href='docs-settings.php#profiler_enable'>xdebug.profiler_enable</a> setting
to 1 in php.ini. This instructs Xdebug to start writing profiling information
into the dump directory configured with the
<a href='docs-settings.php#profiler_output_dir'>xdebug.profiler_output_dir</a>
directive. The name of the generated file always starts with
"<span class="filename">cachegrind.out.</span>" and ends with either the PID
(process ID) of the PHP (or Apache) process or the crc32 hash of the current
working directory. Make sure you have enough space in your
<a href='docs-settings.php#profiler_output_dir'>dump directory</a> as the
amount of information generated by the profiler can be enormous for complex
scripts, for example up to 500MB for a complex application like
<a href='http://ez.no'>eZ publish</a>.</p>

<a name="misc"></a>
<span class="sans">ANALYSING PROFILES</span><br />

<p>After a profile information file has been generated you can open it with
<a href='http://kcachegrind.sf.net'>KCacheGrind</a>:</p>

<p><img src='images/docs/kc-open.png'/></p>

<p>Once the file is opened you have plenty of information available in the 
different panes of <a href='http://kcachegrind.sf.net'>KCacheGrind</a>. On the left side you find the "Flat Profile"
pane showing all functions in your script sorted by time spend in this function,
and all its children.
<img class="l" src='images/docs/kc-profile.png' align='left'/>
The second column "Self" shows the time spend in this function (without its
children), the third column "Called" shows how often a specific function was
called and the last column "Function" shows the name of the function. Xdebug
changes internal PHP function names by prefixing the function name with
"php::" and include files are handled in a special way too. Calls to include
(and include_one, require and require_once) are followed by "::" and the 
filename of the included file. In the screenshot on the left you can see this
for "include::/home/httpd/ez_34/v..." and an example of an internal PHP
function is "php::mysql_query".
<img class="r" src='images/docs/kc-percentage.png' align='right'/>
The numbers in the first two columns can be
either percentages of the full running time of the script (like in the
example) or absolute time (1 unit is 1/10.000.000th of a second). You can
switch between the two modes with the button you see on the right.</p>

<p>The pane on the left exist of an upper and lower pane. The upper one
shows information about which functions called the current selected function
("eztemplatedesignresource-&gt;executecompiledtemplate in the screenshot).
<img class="r" src='images/docs/kc-right-call.png' align='right'/>
The lower pane shows information about the functions that the current selected
function called.</p>

<p>The "Cost" column in the upper pane shows the time spend in the current
selected function while being called from the function in the list. The numbers
in the Cost column added up will always be 100%. The "Cost" column in the lower
pane shows the time spend while calling the function from the list. While adding
the numbers in this list up, you will most likely never reach 100% as the
selected function itself will also takes time to execute.</p>

<p>The "All Callers" and "All Calls" tabs show not only the direct call from
<img class='l' src='images/docs/kc-right-callers.png' align='left'/>
which the function was called respectively all directly made
function calls but also function calls made more levels up and down.
The upper pane in the screenshot on the left shows all functions calling the
current selected one, both directly and indirectly with other functions
inbetween them on the stack. The "Distance" column shows how many function
calls are between the listed and the current selected one (-1). If there are
different distances between two functions, it is shown as a range (for example
"5-24". The number in parentheses is the median distance. The lower pane is
similar except that it shows information on functions called from the current
selected one, again either direct or indirect.</p>

<p><b>more will follow soon</b></p>
			</span></td>
			<td>&nbsp;</td>
			<td>
				<table cellpadding="0" cellspacing="0">
					<tr>
						<td>
<?php include "include/side.php"; ?>
						</td>
					</tr>
				</table>
			</td>
			<td>&nbsp;</td>
		</tr>
<?php include "include/footer.php"; ?>
